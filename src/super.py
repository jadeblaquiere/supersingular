#BSD 3-Clause License
#
# Copyright (c) 2018, Joseph deBlaquiere <jadeblaquiere@yahoo.com>
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of ecpy nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from collections import Counter
from ECC import FieldElement, ECurve, ECPoint

p = 7691
n = 641
h = 12
a = 1
b = 0
gx = 5
gy = 2835
bits = 13

p = 491
n = 41
h = 12
a = 1
b = 0
gx = 4
gy = 331
bits = 9

p = 983
n = 41
h = 24
a = 1
b = 0
gx = 5
gy = 674
bits = 10

p = 887
n = 37
h = 24
a = 1
b = 0
gx = 6
gy = 444
bits = 10

p = 131
n = 11
h = 12
a = 1
b = 0
gx = 6
gy = 109
bits = 8

p = 2063
n = 43
h = 48
a = 1
b = 0
gx = 6
gy = 1732
bits = 12

p = 311
n = 13
h = 24
a = 1
b = 0
gx = 2
gy = 53
bits = 9

p = 227
n = 19
h = 12
a = 1
b = 0
gx = 2
gy = 64
bits = 8

curve = ECurve.ShortWeierstrass(p, a, b, n, h, gx, gy, bits)
privkey = int(FieldElement.urandom(curve.p))

f_a = FieldElement(a, p)
f_b = FieldElement(b, p)

ECPt = []

for x in range(0,p):
    # Weierstrass equation is y**2 = x**3 + ax + b
    f_x = FieldElement(x, p)
    f_y_2 = pow(f_x, 3) + (f_a * f_x) + b
    f_y = f_y_2.sqrt()
    if f_y is not None:
        #print("pt(0x%X, 0x%X)" % (int(f_x), int(f_y)))
        assert curve.PointIsValid(int(f_x), int(f_y))
        ECPt.append(ECPoint(curve, (f_x, f_y)))
        if int(f_y) != 0:
            #print("pt(0x%X, 0x%X)" % (int(f_x), int(-f_y)))
            assert curve.PointIsValid(int(f_x), int(-f_y))
            ECPt.append(ECPoint(curve, (f_x, -f_y)))

print("%d rational points on curve" % (len(ECPt)))

# infinite / neutral point of curve
inf = ECPoint(curve)

subgroups = []
subgroups_str = []

for p in ECPt:
    i = 1
    ip = i * p
    subg = []
    subg_str = []
    while ip != inf:
        subg.append(ip)
        subg_str.append(str(ip))
        i += 1
        ip = i * p
    subg.append(ip)
    subg_str.append(str(ip))
    pa = p.affine()
    print("point (0x%X, 0x%X), order %d" % (pa[0], pa[1], len(subg)))
    new = True
    subgs = []
    gen = None
    for sg_t in subgroups_str:
        if len(sg_t) == len(subg_str):
            if Counter(subg_str) == Counter(sg_t):
                new = False
                gen = sg_t[0]
                break
            #else:
            #    assert sorted(sgs) != sorted(subgs)
    if new is True:
        subgroups.append(subg)
        subgroups_str.append(subg_str)
        print(subg_str)
        #print(Counter(subgs))
        print()
    else:
        print("duplicate of group generated by %s, order %d" % (gen, len(subg)))

print("%d unique subgroups total" % (len(subgroups)))
